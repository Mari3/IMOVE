//
// Created by Wouter Posdijk on 11/05/16.
//

#include "PeopleExtractor.h"

PeopleExtractor::PeopleExtractor(cv::Size frame_size, float pixels_per_meter, float resolution_resize_height) : frame_size(frame_size), pixels_per_meter(pixels_per_meter), resolution_resize_height(resolution_resize_height) {
  // Calculate resize ratio
  resize_ratio = frame_size.height/resolution_resize_height;

  // Initialize empty frame
  frame = cv::Mat::zeros(resolution_resize_height, frame_size.width/resize_ratio, CV_8UC1);

  if (pixels_per_meter > 400) {
    // Initialize detector with low camera if meter > 400 pixels
    detector = PeopleDetector(pixels_per_meter/resize_ratio, true);
  } else {
    // Initialize detector with high camera if meter < 400 pixels
    detector = PeopleDetector(pixels_per_meter/resize_ratio, false);
  }

  // Initialize identifier
  identifier = PeopleIdentifier();
}

PeopleExtractor::~PeopleExtractor() {}

vector<Person> PeopleExtractor::extractPeople(cv::Mat new_frame) {
  // Convert frame to grayscale
  cvtColor(new_frame, new_frame, CV_RGB2GRAY);
  // Downscale frame
  resize(new_frame, new_frame, cv::Size(frame_size.width/resize_ratio, resolution_resize_height));

  // Start working with new frame
  frame = new_frame;
  // Get a vector with every Person in the scene, generated by the identifier from the location provided by the detector
  vector<Person> people = identifier.match(detector.detect(frame));
  // Rescale location of every person based on downscaling
  for (Person& p : people) {
    Vector2 location = p.getLocation();
    p.setLocation(Vector2(location.x*resize_ratio,location.y*resize_ratio));
  }

  // Return vector containing all people in the scene
  return people;
}
