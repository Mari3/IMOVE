//
// Created by Wouter Posdijk on 11/05/16.
//

#include "PeopleExtractor.h"

PeopleExtractor::PeopleExtractor() {
  // Initialize empty frame
  frame = Mat::zeros(240, 320, CV_8UC1);

  // Initialize detector
  detector = PeopleDetector();
  // Initialize identifier
  identifier = PeopleIdentifier();
}

PeopleExtractor::~PeopleExtractor() {}

vector<Person> PeopleExtractor::extractPeople(Mat new_frame) {
  // Initialize empty frame for difference
  Mat difference_frame;

  // Convert frame to grayscale
  cvtColor(new_frame, new_frame, CV_RGB2GRAY);
  // Downscale frame
  resize(new_frame, new_frame, Size(320, 240));
  // Claculate difference
  absdiff(new_frame, frame, difference_frame);
  // Sum pixelvalues of difference frame
  Scalar sumPixels = sum(difference_frame);
  // If the sum of all pixelvalues is too big, the background subtractor has to be renewed
  if (sumPixels[0] + sumPixels[1] + sumPixels[2] > 7000000) {
    detector.renew();
  }

  // Start working with new frame
  frame = new_frame;
  // Get a vector with every Person in the scene, generated by the identifier from the location provided by the detector
  vector<Person> people = identifier.match(detector.detect(frame));
  // Rescale location of every person based on downscaling
  for (Person& p : people) {
    Vector2 location = p.getLocation();
    p.setLocation(Vector2(location.x*2,location.y*2));
  }

  // Return vector containing all people in the scene
  return people;
}
