//
// Created by Wouter Posdijk on 11/05/16.
//

#include "PeopleExtractor.h"

PeopleExtractor::PeopleExtractor(cv::Size frame_size, float pixels_per_meter, float fixed_height) : frame_size(frame_size), pixels_per_meter(pixels_per_meter), fixed_height(fixed_height) {
  // Calculate resize ratio
  resize_ratio = frame_size.height/fixed_height;

  std::cout << "meter to height = " + std::to_string(frame_size.height/pixels_per_meter) << std::endl;
  std::cout << "meter to width = " + std::to_string(frame_size.width/pixels_per_meter) << std::endl;

  std::cout << "resize ratio = " + std::to_string(resize_ratio) << std::endl;

  // Initialize empty frame
  frame = cv::Mat::zeros(fixed_height, frame_size.width/resize_ratio, CV_8UC1);

  std::cout << "resized meter = " + std::to_string(pixels_per_meter/resize_ratio) << std::endl;

  // Initialize detector
  if (pixels_per_meter > 400) {
    detector = PeopleDetector(pixels_per_meter/resize_ratio, true);
  } else {
    detector = PeopleDetector(pixels_per_meter/resize_ratio, false);
  }

  // Initialize identifier
  identifier = PeopleIdentifier();
}

PeopleExtractor::~PeopleExtractor() {}

vector<Person> PeopleExtractor::extractPeople(cv::Mat new_frame) {
  // Initialize empty frame for difference
  cv::Mat difference_frame;

  // Convert frame to grayscale
  cvtColor(new_frame, new_frame, CV_RGB2GRAY);
  // Downscale frame
  resize(new_frame, new_frame, cv::Size(frame_size.width/resize_ratio, fixed_height));
  // Claculate difference
  absdiff(new_frame, frame, difference_frame);
  // Sum pixelvalues of difference frame
  cv::Scalar sumPixels = sum(difference_frame);
  // If the sum of all pixelvalues is too big, the background subtractor has to be renewed
  // if (sumPixels[0] + sumPixels[1] + sumPixels[2] > 7000000) {
  //   detector.renew();
  // }

  // Start working with new frame
  frame = new_frame;
  // Get a vector with every Person in the scene, generated by the identifier from the location provided by the detector
  vector<Person> people = identifier.match(detector.detect(frame));
  // Rescale location of every person based on downscaling
  for (Person& p : people) {
    Vector2 location = p.getLocation();
    p.setLocation(Vector2(location.x*resize_ratio,location.y*resize_ratio));
  }

  // Return vector containing all people in the scene
  return people;
}
